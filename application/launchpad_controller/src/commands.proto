//Message format for transmitting commands
// from UI application to LC.
syntax = "proto3";

package commands;

// enum CommandType {
//   UNKNOWN = 0;
//   OPEN = 1; 
//   CLOSE = 2;
//   RESET = 3; 
//   SET_MOTOR_POSITION = 4; // New command for setting the stepper motor position
// }

// message ControlCommand {
//   int32 id = 1;
//   CommandType command = 2;
//   sint32 motorDelta = 3; // Field for a given motor delta 
// }

message SwitchControl {
  bool state = 1;
}

message StepperControl {
  sint32 motorDelta = 1;
}

message Ignition {

}

message SetSudo {
  bool sudoMode = 1;
}

message ControlCommand {
  oneof command {
    SwitchControl s1 = 1;
    SwitchControl s2 = 2;
    SwitchControl s3 = 3;
    SwitchControl s4 = 4;
    SwitchControl s5 = 5;
    SwitchControl s6 = 6;
    SwitchControl s7 = 7;
    SwitchControl s8 = 8;
    SwitchControl led1 = 9;
    SwitchControl led2 = 10;
    SwitchControl led3 = 11;
    SwitchControl led4 = 12;
    StepperControl stepper1 = 13;
    StepperControl stepper2 = 14;
    StepperControl stepper3 = 15;
    
    // combination command for ignition sequence
    Ignition ignition = 16;

    // can use this to enable/disable self-imposed firmware restrictions
    // e.g. if we make Switch5 control a pyro channel, then make it read-only from a client 
    // unless in sudo mode
    SetSudo sudo = 17; 
  };
}